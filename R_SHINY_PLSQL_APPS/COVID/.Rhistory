library(readxl)
library(httr)
library(ggplot2)
library(dplyr)
#create the URL where the dataset is stored with automatic updates every day
url <- paste("https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide-",format(Sys.time(), "%Y-%m-%d"), ".xlsx", sep = "")
#download the dataset from the website to a local temporary file
GET(url, authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".xlsx")))
#read the Dataset sheet into “R”
data_covid <- read_excel(tf)
df_data_sorted <- data_covid %>% arrange(dateRep)
shiny::runApp()
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
#these libraries need to be loaded
library(utils)
library(httr)
#download the dataset from the ECDC website to a local temporary file
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".csv")))
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv(tf)
View(data)
library(readxl)
library(httr)
library(ggplot2)
library(dplyr)
library(utils)
#create the URL where the dataset is stored with automatic updates every day
# <- paste("https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide-",format(Sys.time(), "%Y-%m-%d"), ".xlsx", sep = "")
#download the dataset from the website to a local temporary file
#GET(url, authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".xlsx")))
#read the Dataset sheet into “R”
#data_covid <- read_excel(tf)
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".csv")))
#read the Dataset sheet into “R”. The dataset will be called "data".
data_covid <- read.csv(tf)
df_data_sorted <- data_covid %>% arrange(dateRep)
show_country_data <- function(input_df,input_country,input_day_0_cases){
input_df<-input_df%>%arrange(dateRep)
country_df <- input_df %>% filter(countriesAndTerritories==input_country)
## All COVID cases
all_cases<-c()
all_cases[1]<-country_df$cases[1]
for(i in 2:nrow(country_df)){
all_cases[i]<-all_cases[i-1]+country_df$cases[i]
}
country_df$all_cases<-all_cases
## All deaths
all_deaths<-c()
all_deaths[1]<-country_df$deaths[1]
for(i in 2:nrow(country_df)){
all_deaths[i]<-all_deaths[i-1]+country_df$deaths[i]
}
country_df$all_deaths<-all_deaths
## Cases dynamics
cases_dynamic<-c()
cases_dynamic[1]<-0
for(i in 2:nrow(country_df)){
cases_dynamic[i]<-country_df$cases[i]/country_df$cases[i-1]-1
}
country_df$cases_dynamic<-cases_dynamic*100
## Day 0
for(i in 1:nrow(country_df)){
if(country_df$all_cases[i]<input_day_0_cases){
next
}else{
day_0<-country_df$dateRep[i]
break
}
}
## Subdataset based on day_0
country_df<-country_df%>%filter(dateRep>=day_0)
## Day number
country_df$day_number<-1:nrow(country_df)
return(country_df)
}
shiny::runApp()
runApp()
runApp()
runApp()
submited_countries_data<-df_data_sorted %>% filter(cases==-1)
colnames(data)
args(ggplot)
summary(data)
runApp()
runApp()
str(data)
as.Date(data$dateRep)
runApp()
runApp()
runApp()
str(data)
colnames(data)
runApp()
runApp()
View(df_data_sorted)
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".csv")))
#read the Dataset sheet into R. The dataset will be called "data".
data_covid <- read.csv(tf)
data_covid$dateRep <- as.POSIXct(data_covid$dateRep,format="%d/%m/%Y")
data_covid$country=factor(data_covid$countriesAndTerritories)
df_data_sorted <- data_covid %>% arrange(dateRep)
View(df_data_sorted %>% filter(country=="Poland"))
runApp()
