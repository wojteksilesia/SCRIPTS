--CREATE USER WATA IDENTIFIED BY wata;
--GRANT CREATE SESSION, CREATE SEQUENCE, CREATE TRIGGER, CREATE TABLE TO WATA;
--ALTER USER WATA QUOTA UNLIMITED ON SYSTEM;


------ CITIES

CREATE SEQUENCE SEQ_WATA_CITIES
START WITH 1 INCREMENT BY 1;


CREATE TABLE WATA_CITIES
(
	ID NUMBER,
	NAME VARCHAR2(4000) NOT NULL,
	TIMESTAMP_CREATED DATE,
	TIMESTAMP_MODIFIED DATE
);


ALTER TABLE WATA_CITIES 
ADD CONSTRAINT PK_WATA_CITIES PRIMARY KEY (ID);


ALTER TABLE WATA_CITIES
ADD CONSTRAINT UQ_WATA_CITIES UNIQUE (NAME);



--SET DEFINE OFF;
CREATE OR REPLACE TRIGGER TRG_WATA_CITIES_IU
BEFORE INSERT OR UPDATE 
ON WATA_CITIES
FOR EACH ROW

BEGIN
	IF INSERTING THEN 
		:NEW.TIMESTAMP_CREATED := SYSDATE;
		:NEW.ID := SEQ_WATA_CITIES.NEXTVAL;
	ELSIF UPDATING THEN 
		:NEW.TIMESTAMP_MODIFIED := SYSDATE;
	END IF;

EXCEPTION
	WHEN OTHERS THEN RAISE;

END TRG_WATA_CITIES_IU;
/


------ RETAILERS 

CREATE SEQUENCE SEQ_WATA_RETAILERS
START WITH 1 INCREMENT BY 1;


CREATE TABLE WATA_RETAILERS
(
	ID NUMBER,
	NAME VARCHAR2(4000) NOT NULL,
	TIMESTAMP_CREATED DATE,
	TIMESTAMP_MODIFIED DATE
);


ALTER TABLE WATA_RETAILERS 
ADD CONSTRAINT PK_WATA_RETALERS PRIMARY KEY (ID);


ALTER TABLE WATA_RETAILERS
ADD CONSTRAINT UQ_WATA_RETAILERS UNIQUE (NAME);



--SET DEFINE OFF;
CREATE OR REPLACE TRIGGER TRG_WATA_RETAILERS_IU
BEFORE INSERT OR UPDATE 
ON WATA_RETAILERS
FOR EACH ROW

BEGIN
	IF INSERTING THEN 
		:NEW.TIMESTAMP_CREATED := SYSDATE;
		:NEW.ID := SEQ_WATA_RETAILERS.NEXTVAL;
	ELSIF UPDATING THEN 
		:NEW.TIMESTAMP_MODIFIED := SYSDATE;
	END IF;

EXCEPTION
	WHEN OTHERS THEN RAISE;

END TRG_WATA_RETAILERS_IU;
/


-------- SHOPS

CREATE SEQUENCE SEQ_WATA_SHOPS
START WITH 1 INCREMENT BY 1;

CREATE TABLE WATA_SHOPS
(
	ID NUMBER,
	ID_RETAILER NUMBER REFERENCES WATA_RETAILERS (ID) NOT NULL,
	ADDRESS VARCHAR2(4000),
	ID_CITY NUMBER REFERENCES WATA_CITIES (ID) NOT NULL,
	TIMESTAMP_CREATED DATE,
	TIMESTAMP_MODIFIED DATE
);


ALTER TABLE WATA_SHOPS 
ADD CONSTRAINT PK_WATA_SHOPS PRIMARY KEY (ID);

ALTER TABLE WATA_SHOPS
ADD CONSTRAINT UQ_WATA_SHOPS UNIQUE (ID_RETAILER,ADDRESS,ID_CITY);


--SET DEFINE OFF;
CREATE OR REPLACE TRIGGER TRG_WATA_SHOPS_IU
BEFORE INSERT OR UPDATE 
ON WATA_SHOPS
FOR EACH ROW

BEGIN
	IF INSERTING THEN 
		:NEW.TIMESTAMP_CREATED := SYSDATE;
		:NEW.ID := SEQ_WATA_SHOPS.NEXTVAL;
	ELSIF UPDATING THEN 
		:NEW.TIMESTAMP_MODIFIED := SYSDATE;
	END IF;

EXCEPTION
	WHEN OTHERS THEN RAISE;

END TRG_WATA_SHOPS_IU;
/


-------- PRODUCT_TYPES

CREATE SEQUENCE SEQ_WATA_PRODUCT_TYPES
START WITH 1 INCREMENT BY 1;

CREATE TABLE WATA_PRODUCT_TYPES
(
	ID NUMBER,
	NAME VARCHAR2(4000) NOT NULL,
	TIMESTAMP_CREATED DATE,
	TIMESTAMP_MODIFIED DATE
);


ALTER TABLE WATA_PRODUCT_TYPES 
ADD CONSTRAINT PK_WATA_PRODUCT_TYPES PRIMARY KEY (ID);

ALTER TABLE WATA_PRODUCT_TYPES
ADD CONSTRAINT UQ_WATA_PRODUCT_TYPES UNIQUE (NAME);


--SET DEFINE OFF;
CREATE OR REPLACE TRIGGER TRG_WATA_PRODUCT_TYPES_IU
BEFORE INSERT OR UPDATE 
ON WATA_PRODUCT_TYPES
FOR EACH ROW

BEGIN
	IF INSERTING THEN 
		:NEW.TIMESTAMP_CREATED := SYSDATE;
		:NEW.ID := SEQ_WATA_PRODUCT_TYPES.NEXTVAL;
	ELSIF UPDATING THEN 
		:NEW.TIMESTAMP_MODIFIED := SYSDATE;
	END IF;

EXCEPTION
	WHEN OTHERS THEN RAISE;

END TRG_WATA_PRODUCT_TYPES_IU;
/



--- PRODUCTS
CREATE SEQUENCE SEQ_WATA_PRODUCTS
START WITH 1 INCREMENT BY 1;

CREATE TABLE WATA_PRODUCTS
(
	ID NUMBER,
	NAME VARCHAR2(4000) UNIQUE NOT NULL,
	ID_PRODUCT_TYPE NUMBER REFERENCES WATA_PRODUCT_TYPES (ID),
	TIMESTAMP_CREATED DATE,
	TIMESTAMP_MODIFIED DATE
);


ALTER TABLE WATA_PRODUCTS
ADD CONSTRAINT PK_WATA_PRODUCTS PRIMARY KEY (ID);

--ALTER TABLE WATA_PRODUCTS
--ADD CONSTRAINT UQ_WATA_PRODUCTS UNIQUE (NAME,QUANTITY,ID_PRODUCT_TYPE);


--SET DEFINE OFF;
CREATE OR REPLACE TRIGGER TRG_WATA_PRODUCTS_IU
BEFORE INSERT OR UPDATE 
ON WATA_PRODUCTS
FOR EACH ROW

BEGIN
	IF INSERTING THEN 
		:NEW.TIMESTAMP_CREATED := SYSDATE;
		:NEW.ID := SEQ_WATA_PRODUCTS.NEXTVAL;
	ELSIF UPDATING THEN 
		:NEW.TIMESTAMP_MODIFIED := SYSDATE;
	END IF;

EXCEPTION
	WHEN OTHERS THEN RAISE;

END TRG_WATA_PRODUCTS_IU;
/



--- SHOPPING
CREATE SEQUENCE SEQ_WATA_SHOPPING
START WITH 1 INCREMENT BY 1;

CREATE TABLE WATA_SHOPPING
(
	ID NUMBER,
	ID_SHOP NUMBER REFERENCES WATA_SHOPS (ID),
	SHOPPING_DATE DATE,
	TIMESTAMP_CREATED DATE,
	TIMESTAMP_MODIFIED DATE
);


ALTER TABLE WATA_SHOPPING
ADD CONSTRAINT PK_WATA_SHOPPING PRIMARY KEY (ID);



--SET DEFINE OFF;
CREATE OR REPLACE TRIGGER TRG_WATA_SHOPPING_IU
BEFORE INSERT OR UPDATE 
ON WATA_SHOPPING
FOR EACH ROW

BEGIN
	IF INSERTING THEN 
		:NEW.TIMESTAMP_CREATED := SYSDATE;
		:NEW.ID := SEQ_WATA_SHOPPING.NEXTVAL;
	ELSIF UPDATING THEN 
		:NEW.TIMESTAMP_MODIFIED := SYSDATE;
	END IF;

EXCEPTION
	WHEN OTHERS THEN RAISE;

END TRG_WATA_SHOPPING_IU;
/



--- SHOPPING_PRODS
CREATE SEQUENCE SEQ_WATA_SHOPPING_PRODS
START WITH 1 INCREMENT BY 1;

CREATE TABLE WATA_SHOPPING_PRODS
(
	ID NUMBER,
	ID_SHOPPING NUMBER REFERENCES WATA_SHOPPING (ID),
	ID_PRODUCT NUMBER REFERENCES WATA_PRODUCTS (ID),
	PRICE NUMBER,
	WEIGHT VARCHAR2(4000), -- np. waga owoców, pojemność napojów itd jest w tabeli WATA_PRODUCTS
	TIMESTAMP_CREATED DATE,
	TIMESTAMP_MODIFIED DATE
);


ALTER TABLE WATA_SHOPPING_PRODS
ADD CONSTRAINT PK_WATA_SHOPPING_PRODS PRIMARY KEY (ID);


--SET DEFINE OFF;
CREATE OR REPLACE TRIGGER TRG_WATA_SHOPPING_PRODS_IU
BEFORE INSERT OR UPDATE 
ON WATA_SHOPPING_PRODS
FOR EACH ROW

BEGIN
	IF INSERTING THEN 
		:NEW.TIMESTAMP_CREATED := SYSDATE;
		:NEW.ID := SEQ_WATA_SHOPPING_PRODS.NEXTVAL;
	ELSIF UPDATING THEN 
		:NEW.TIMESTAMP_MODIFIED := SYSDATE;
	END IF;

EXCEPTION
	WHEN OTHERS THEN RAISE;

END TRG_WATA_SHOPPING_PRODS_IU;
/



-- LOGI

CREATE SEQUENCE SEQ_WATA_LOGS
START WITH 1 INCREMENT BY 1;

CREATE TABLE WATA_LOGS
(
	ID NUMBER,
	FUNCTION_NAME VARCHAR2(4000),
	START_TIME DATE,
	END_TIME DATE,
	PARAMETERS_IN VARCHAR2(4000),
	ERROR_DETAILS VARCHAR2(4000)
);

ALTER TABLE WATA_LOGS
ADD CONSTRAINT PK_WATA_LOGS PRIMARY KEY (ID);

CREATE OR REPLACE TRIGGER TRG_WATA_LOGS_IU
BEFORE INSERT 
ON WATA_LOGS
FOR EACH ROW

BEGIN
	IF INSERTING THEN 
		:NEW.ID := SEQ_WATA_LOGS.NEXTVAL;
	END IF;

EXCEPTION
	WHEN OTHERS THEN RAISE;

END TRG_WATA_LOGS_IU;
/





-- @C:\Users\Wojtek\Desktop\APLIKACJA_ZAKUPOWA\TABELE.sql